{"remainingRequest":"/opt/projects/daedal-wasm/static/node_modules/babel-loader/lib/index.js!/opt/projects/daedal-wasm/static/node_modules/vue-loader/lib/selector.js?type=script&index=0!/opt/projects/daedal-wasm/static/src/App.vue","dependencies":[{"path":"/opt/projects/daedal-wasm/static/src/App.vue","mtime":1643899500875},{"path":"/opt/projects/daedal-wasm/static/node_modules/cache-loader/dist/cjs.js","mtime":1643899499475},{"path":"/opt/projects/daedal-wasm/static/node_modules/babel-loader/lib/index.js","mtime":1643899499935},{"path":"/opt/projects/daedal-wasm/static/node_modules/vue-loader/lib/selector.js","mtime":1643899499219}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Mandelbrot from './Mandelbrot';\nimport MandelbrotWasm from './Mandelbrot-Wasm';\n\nfunction linkNodes(nodes, targets, events) {\n  for (let node of nodes) {\n    for (let evtName of events) {\n      node.addEventListener(evtName, function (evt) {\n        if (evt.relatedTarget) {\n          return;\n        }\n\n        dispatch(evtName, evt, targets, nodes, node);\n      });\n    }\n  }\n}\n\nfunction dispatch(evtName, evt, targets, nodes, except) {\n  let {\n    left,\n    top\n  } = except.getBoundingClientRect();\n  nodes.forEach((node, i) => {\n    if (node == except) return;\n    let {\n      left: left1,\n      top: top1\n    } = node.getBoundingClientRect();\n    var e = new MouseEvent(evtName, {\n      bubbles: true,\n      cancelable: true,\n      relatedTarget: except,\n      clientX: evt.clientX - left + left1,\n      clientY: evt.clientY - top + top1\n    });\n    targets[i].dispatchEvent(e);\n  });\n}\n\nexport default {\n  components: {\n    Mandelbrot,\n    MandelbrotWasm\n  },\n\n  mounted() {\n    let a = this.$refs.jsM;\n    let b = this.$refs.wasmM;\n    linkNodes([a.$vnode.elm, b.$vnode.elm], [a.getTarget(), b.getTarget()], ['mousedown', 'mousemove', 'mouseup']);\n  }\n\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAcA;AACA;;AAEA,2CACA;0BACA;gCACA;oDACA;+BACA;AACA;AACA;;+CACA;AACA;AACA;AACA;;;AAEA,wDACA;;;;aACA;6BACA;wBAEA;;;;aACA;;eAEA;kBACA;qBACA;oCACA;mCACA,AACA;AANA;6BAOA;AACA;;;AAEA;;;AAEA;;;;AACA;AACA,uBACA;AACA,sCACA,wBACA,yCACA,AACA;AACA;;AAVA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <div>\n      <h1>js</h1>\n      <mandelbrot ref=\"jsM\" :width=\"640\" :height=\"500\"/>\n    </div>\n    <div>\n      <h1>rust</h1>\n      <mandelbrot-wasm ref=\"wasmM\" :width=\"640\" :height=\"500\"/>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Mandelbrot from './Mandelbrot';\nimport MandelbrotWasm from './Mandelbrot-Wasm';\n\nfunction linkNodes(nodes, targets, events) {\n  for (let node of nodes) {\n    for (let evtName of events) {\n      node.addEventListener(evtName, function(evt) {\n        if (evt.relatedTarget) {\n          return;\n        }\n        dispatch(evtName, evt, targets, nodes, node);\n      });\n    }\n  }\n}\n\nfunction dispatch(evtName, evt, targets, nodes, except) {\n  let { left, top } = except.getBoundingClientRect();\n  nodes.forEach((node, i) => {\n    if (node == except) return;\n\n    let {left: left1, top: top1} = node.getBoundingClientRect();\n    var e = new MouseEvent(evtName, {\n      bubbles: true,\n      cancelable: true,\n      relatedTarget: except,\n      clientX: evt.clientX - left + left1,\n      clientY: evt.clientY - top + top1,\n    });\n    targets[i].dispatchEvent(e);\n  });\n}\n\nexport default {\n  components: { Mandelbrot, MandelbrotWasm },\n  mounted() {\nlet a = this.$refs.jsM;\nlet b = this.$refs.wasmM;\n    linkNodes(\n      [a.$vnode.elm, b.$vnode.elm],\n      [a.getTarget(), b.getTarget()],\n      ['mousedown', 'mousemove', 'mouseup'],\n    );\n  },\n}\n</script>\n\n<style>\nhtml {\n  background-color: #ddd;\n}\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  display: flex;\n  justify-content: center;\n}\ninput {\n  width: 50px;\n  padding: 10px;\n  margin: 0 5px;\n}\n</style>\n"]}]}